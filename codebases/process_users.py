#!/usr/bin/python2.7
############################################################
##    FILENAME:   process_users.py    
##    VERSION:    1.5
##    SINCE:      2014-03-24
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################
import csv

#TODO: diminish the dimensionality of user vector

with open('./../Dataset/users.tsv','rb') as tsvin, \
    open('./trainUsers.csv', 'wb') as csvTrainOut, \
    open('./testUsers.csv', 'wb') as csvTestOut:
    tsvin = csv.reader(tsvin, delimiter='\t')
    csvTrainOut = csv.writer(csvTrainOut)
    csvTestOut = csv.writer(csvTestOut)

    header = tsvin.next()
    nColumns = len(header)


    dictionaries = [] # dictionary for discretizing each column
    values = [] # numerical count of distinct label
    for i in range(0, nColumns):
        dictionaries.append({})
        values.append(0)

    ## DISCRITIZATION
    discretSet = range(3,9) + range(10,15) # set of index to discretize
    removeSet = [2,9] # set of index to remove
    zipIdx = 6
    SCSUsers = [] # users matrix by simple coding scheme
    BCSUsers = [] # users matrix by binary coding scheme
    for user in tsvin:
        split = user[2]
        userid = user[0]
        for i in discretSet:
            key = user[i]
            #if i == zipIdx:
            #    key = key[:-1]
            if not dictionaries[i].has_key(key):
                dictionaries[i][key] = values[i]
                values[i] += 1
            user[i] = dictionaries[i][key]
        scsUser = user
        SCSUsers.append(scsUser)

    nSCSFeatures = len(SCSUsers[0])
    print "nSCSFeatures:", nSCSFeatures
    
    print "Domain size of each variables: "
    newheader = []
    for i in range(0, nColumns):
        if i in removeSet: continue
        if values[i] <= 0: values[i] = 1
        print "  ", header[i], values[i]
        newheader = newheader + [header[i]] * values[i]

    ## HEADER FORMULATION
    csvTrainOut.writerows([newheader])
    csvTestOut.writerows([newheader])
    nBCSFeatures = None
    for scsUser in SCSUsers:
        bcsUser = [] # new user vector in binary coding scheme
        for i in range(0, nSCSFeatures):
            if i in removeSet: # ignore feature to be removed
                continue
            if i in discretSet: # 
                temp = [0 for x in range(0,values[i])]
                temp[scsUser[i]] = 1
                bcsUser = bcsUser + temp
            else: #
                bcsUser.append(scsUser[i])
        ## display the binary encoding result and guarantee its safety
        if nBCSFeatures is None:
            nBCSFeatures = len(bcsUser)
            print "nBCSFeatures (total):", nBCSFeatures
        else:
            assert(nBCSFeatures == len(bcsUser))
        #BCSUsers.append(bcsUser)
        ## output to external csv, piece by piece
        if split == 'Test':
            csvTestOut.writerows([bcsUser])
        else:
            csvTrainOut.writerows([bcsUser])
