############################################################
##    FILENAME:   generateJoin.py    
##    VERSION:    1.0
##    SINCE:      2014-05-20
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

import csv
from util import *

with open('./sampleData/sampled_train_apps.tsv') as trainIn, \
        open('./sampleData/sampled_test_apps.tsv') as testIn, \
        open('./sampleData/newUsers.csv') as userIn, \
        open('./sampleData/newJobs.csv') as jobIn, \
        open('./sampleData/joint_train.csv', 'w') as csvtrainout, \
        open('./sampleData/joint_test.csv', 'w') as csvtestout:

    csvtrainout = csv.writer(csvtrainout, delimiter=' ')
    csvtestout = csv.writer(csvtestout, delimiter=' ')

    trainSet = csv.reader(trainIn, delimiter='\t')
    testSet = csv.reader(testIn, delimiter='\t')
    userSet = csv.reader(userIn, delimiter=',')
    jobSet = csv.reader(jobIn, delimiter=',')

    nTrainColumns = len(trainSet.next())
    nTestColumns = len(testSet.next())
    nUserColumns = len(userSet.next())
    nJobColumns = len(jobSet.next())

    """
    SET UP USER DICTIONARY
    """
    task_size = 77060
    udpb = ProgressBar(task_size, name="Set up user dictionary")
    udpb_index = 0
    allusers = {}
    for user in userSet:
        ukey = int(user[0])
        uvalue = tuple(user[1:])
        # print ukey, uvalue 
        allusers.update({ukey:uvalue})
        udpb_index += 1
        udpb.update(udpb_index)
        udpb.display()
        
    """
    SET UP JOB DICTIONARY
    every job only has state and description
    """
    task_size = 81213
    jdpb = ProgressBar(task_size, name="Set up job dictionary")
    jdpb_index = 0
    alljobs = {}
    for job in jobSet:
        jkey = int(job[0])
        '''
        deal with state (nominal)
        '''
        state = ['0'] * 55
        state[int(job[3])] = '1'
        jvalue = tuple(state + job[6:])
        # print jkey, jvalue
        alljobs.update({jkey:jvalue})
        jdpb_index += 1
        jdpb.update(jdpb_index)
        jdpb.display()

    """
    SET UP TRAINING JOIN TABLE
    """
    train_join_pb = ProgressBar(303833, name='Set up test joint table')
    index = 0
    trainEntities = []
    trainLabels = []
    for app in trainSet:
        nUserFeatures = 1
        userid = int(app[0])
        if allusers.has_key(userid):
            userfeat = list(allusers[userid])
        else:
            print "ERROR"

        jobid = int(app[-1])
        if alljobs.has_key(jobid):
            jobfeat = list(alljobs[jobid])
        else:
            print "ERROR"

        jointEntity = ["+1"]
        for i in range(len(userfeat)):
            if userfeat[i] is None or len(userfeat[i]) == 0:
                userfeat[i] = 0 # invalid element
            elif not userfeat[i] == '0': # non-zero, specify
                jointEntity.append(str(nUserFeatures) + ":" + str(userfeat[i]))
            else: # zero, cause sparisity
                pass
            nUserFeatures += 1

        for j in range(len(jobfeat)):
            if jobfeat[j] is None or len(jobfeat[j]) == 0 or jobfeat[j] =='0':
                jobfeat[j] = 0
            else:
                jointEntity.append(str(nUserFeatures+j+1) + ":" + str(jobfeat[j]))
        #print jointEntity
        trainEntities.append(jointEntity)
        trainLabels.append(1)
        csvtrainout.writerows([jointEntity])

        index += 1
        train_join_pb.update(index)
        train_join_pb.display()
    """ 
    SET UP TEST JOIN TABLE
    """ 
    test_join_pb = ProgressBar(49749, name='Set up test joint table')
    index = 0
    testEntities = []
    testLabels = []
    for app in testSet:
        nUserFeatures = 1
        userid = int(app[0])
        if allusers.has_key(userid):
            userfeat = list(allusers[userid])
        else:
            print "ERROR"

        jobid = int(app[-1])
        if alljobs.has_key(jobid):
            jobfeat = list(alljobs[jobid])
        else:
            print "ERROR"

        jointEntity = ["+1"]
        #jointEntity = [jointEntity] + [userid, jobid]
        for i in range(len(userfeat)):
            if userfeat[i] is None or len(userfeat[i]) == 0:
                userfeat[i] = 0
            jointEntity.append(str(nUserFeatures) + ":" + str(userfeat[i]))
            nUserFeatures += 1

        for j in range(len(jobfeat)):
            if jobfeat[j] is None or len(jobfeat[j]) == 0 or jobfeat[j] == '0':
                jobfeat[j] = 0
            else:
                jointEntity.append(str(nUserFeatures+j+1) + ":" + str(jobfeat[j]))
        #print jointEntity
        testEntities.append(jointEntity)
        testLabels.append(1)
        csvtestout.writerows([jointEntity])

        index += 1
        test_join_pb.update(index)
        test_join_pb.display()

