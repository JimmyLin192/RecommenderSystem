############################################################
##    FILENAME:   process_apps.py    
##    VERSION:    1.0
##    SINCE:      2014-08-17
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@cs.utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

import sys
import csv

NARGS = 2
WIN_ONE_ONLY = True

train_users_index = "train_users_index"
train_jobs_index = "train_jobs_index"
train_A = "train_A"
test_users_index = "test_users_index"
test_jobs_index = "test_jobs_index"
test_A = "test_A"

def usage():
    ustr = ''
    ustr += '''
    Description: 
       generate matrix A for IMC problem
    List of output files: 
       train_A
       train_users_index
       train_jobs_index
       test_A
       test_users_index
       test_jobs_index
    Usage: 
       process_apps.py [app_file]
    '''
    sys.stderr.write(ustr + '\n')

def output(job_mat_ids, user_mat_id, A_writer):
    # sort job_mat_ids
    job_mat_ids.sort()
    # form string
    string = str(user_mat_id)
    for jmid in job_mat_ids:
        string += " " + str(jmid) + ":1"
    A_writer.write(string+'\n')

if __name__ == '__main__':
    # validate the input
    nargs = len(sys.argv)
    if nargs != NARGS:
        usage()
        sys.exit(-1)
    app_file = sys.argv[1]

    # read app
    app_reader = open(app_file, 'rb')
    app_reader = csv.reader(app_reader, delimiter='\t')
    header = app_reader.next()

    train_A_table = {}
    train_users_id_set = set([])
    train_jobs_id_set = set([])
    test_A_table = {}
    test_users_id_set = set([])
    test_jobs_id_set = set([])
    for app in app_reader:
        user_id = int(app[0])
        job_id = int(app[-1])
        window_id = int(app[1])
        isTrain = bool(app[2] == 'Train')
        if window_id > 1 and WIN_ONE_ONLY: 
            continue
        #print user_lookup[user_id], job_lookup[job_id]
        if isTrain: 
            train_users_id_set.add(user_id)
            train_jobs_id_set.add(job_id)
            if train_A_table.has_key(user_id):
                train_A_table[user_id].append(job_id)
            else:
                train_A_table.update({user_id:[job_id]})
        else:
            test_users_id_set.add(user_id)
            test_jobs_id_set.add(job_id)
            if test_A_table.has_key(user_id):
                test_A_table[user_id].append(job_id)
            else:
                test_A_table.update({user_id:[job_id]})
        
    ## OUTPUT: list of ordered train user index
    train_users_id_list = list(train_users_id_set)
    train_users_id_list.sort()
    out = open (train_users_index, "wb")
    for train_user_id in train_users_id_list:
        out.write(str(train_user_id) + "\n")
    out.close()
    ## OUTPUT: list of ordered train job index
    train_jobs_id_list = list(train_jobs_id_set)
    train_jobs_id_list.sort()
    out = open (train_jobs_index, "wb")
    for train_job_id in train_jobs_id_list:
        out.write(str(train_job_id) + "\n")
    out.close()
    ## OUTPUT: mat A
    train_users_lookup = {}
    for pos in range(0, len(train_users_id_list)):
        train_users_lookup.update({train_users_id_list[pos]:pos})
    train_jobs_lookup = {}
    for pos in range(0, len(train_jobs_id_list)):
        train_jobs_lookup.update({train_jobs_id_list[pos]:pos})
    out = open (train_A, "wb")
    for train_user_id in train_users_id_list:
        job_ids = train_A_table[train_user_id] 
        job_ids.sort()
        job_indices = [train_jobs_lookup[x] for x in job_ids]
        string = str(train_users_lookup[train_user_id]) 
        for jpos in job_indices:
            string += " " + str(jpos) + ":" + "1"
        out.write(string + "\n")
    out.close()

    ## OUTPUT: list of ordered test user index
    test_users_id_list = list(test_users_id_set)
    test_users_id_list.sort()
    out = open (test_users_index, "wb")
    for test_user_id in test_users_id_list:
        out.write(str(test_user_id) + "\n")
    out.close()
    ## OUTPUT: list of ordered test job index
    test_jobs_id_list = list(test_jobs_id_set)
    test_jobs_id_list.sort()
    out = open (test_jobs_index, "wb")
    for test_job_id in test_jobs_id_list:
        out.write(str(test_job_id) + "\n")
    out.close()
    ## OUTPUT: mat A
    test_users_lookup = {}
    for pos in range(0, len(test_users_id_list)):
        test_users_lookup.update({test_users_id_list[pos]:pos})
    test_jobs_lookup = {}
    for pos in range(0, len(test_jobs_id_list)):
        test_jobs_lookup.update({test_jobs_id_list[pos]:pos})
    out = open (test_A, "wb")
    for test_user_id in test_users_id_list:
        job_ids = test_A_table[test_user_id] 
        job_ids.sort()
        job_indices = [test_jobs_lookup[x] for x in job_ids]
        string = str(test_users_lookup[test_user_id]) 
        for jpos in job_indices:
            string += " " + str(jpos) + ":" + "1"
        out.write(string + "\n")
    out.close()
